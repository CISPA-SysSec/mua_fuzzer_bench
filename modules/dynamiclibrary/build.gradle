import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.os.OperatingSystem
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'cpp-library'

tasks.withType(CppCompile).configureEach {
    // Define a compiler options
    compilerArgs.add '-O3'
    compilerArgs.add '-Werror'
    compilerArgs.add '-Wno-nullability-completeness'

    // Define toolchain-specific compiler options
    compilerArgs.addAll toolChain.map { toolChain ->
        if (Os.isFamily(Os.FAMILY_MAC)) {
            println 'On Mac, adding sysroot and system path'
            return ['-isysroot', '/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/', "-isystem", "/Library/Developer/CommandLineTools/usr/include/c++/v1"]
        }
        return []
    }

}

model {
    toolChains {
        clang(Clang) {
            path "${llvmBinPath}"
            eachPlatform {
                staticLibArchiver.executable = "llvm-ar"
                // see https://github.com/gradle/gradle-native/issues/859
                def useNormalIncludeFlagInsteadOfSystemIncludeFlag = { List<String> args ->
                    ListIterator<String> iter = args.listIterator()
                    while (iter.hasNext()) {
                        String arg = iter.next()
                        if (arg.startsWith("-isystem")) {
                            iter.remove()
                            iter.add(arg.replace("-isystem", "-I"))
                        }
                        if (arg.startsWith("-nostdinc")) {
                            iter.remove()
                        }
                    }
                }
                cCompiler.withArguments(useNormalIncludeFlagInsteadOfSystemIncludeFlag)
                cppCompiler.withArguments(useNormalIncludeFlagInsteadOfSystemIncludeFlag)
                linker.withArguments(useNormalIncludeFlagInsteadOfSystemIncludeFlag)
            }
        }
    }
}


library {
   linkage = [Linkage.SHARED]
}