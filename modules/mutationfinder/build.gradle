import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.os.OperatingSystem
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'cpp-library'


def llvmConfigVariable(variable, components = []) {
    if (!file("${llvmBinPath}llvm-config").exists()) {
        throw new GradleException("missing llvm-config script")
    }

    def componentsString = String.join(' ', components)
    def proc = "${llvmBinPath}llvm-config --${variable} ${componentsString}".execute()
    def outputStream = new StringBuffer()

    proc.waitForProcessOutput(outputStream, System.err)
    return outputStream.toString().replaceAll('\n', '').trim().split("\\s+")
}


def PkgConfigVariable(variable, library) {
    def proc = "pkg-config --${variable} ${library}".execute()
    def outputStream = new StringBuffer()

    proc.waitForProcessOutput(outputStream, System.err)
    def output = outputStream.toString()
    return output.replaceAll('\n', ' ').trim()
}

tasks.withType(CppCompile).configureEach {

    // Define a compiler options
    compilerArgs.add '-O3'
    compilerArgs.add '-Werror'
    compilerArgs.addAll llvmConfigVariable('cxxflags')
    // Gotcha: The -fexceptions must always be written after llvmConfigVariable to overwrite -fno-exceptions
    compilerArgs.add '-fexceptions'
    compilerArgs.add PkgConfigVariable('cflags', 'nlohmann_json')
    // Define toolchain-specific compiler options
    compilerArgs.addAll toolChain.map { toolChain ->
        if (Os.isFamily(Os.FAMILY_MAC)) {
            println 'On Mac, adding sysroot and system path'
            return ['-isysroot', '/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/', "-isystem", "/Library/Developer/CommandLineTools/usr/include/c++/v1"]
        }
        return []
    }

}

tasks.withType(LinkSharedLibrary).configureEach {
    linkerArgs.addAll llvmConfigVariable('ldflags')
    linkerArgs.addAll llvmConfigVariable('libs', ['core'])
}

model {
    toolChains {
        clang(Clang) {
            path "${llvmBinPath}"
        }
    }
}


library {
    linkage = [Linkage.SHARED]
    dependencies {
        api project(":utilities")
    }
}

task generateScripts(type: Copy) {
    from('scripts') {
        include 'compileAndFind.py'
        fileMode 0750

        filter(ReplaceTokens, tokens: [
                LLVM_BINDIR: llvmConfigVariable('bindir')[0],
//                 CLANG      : new File(llvmConfigVariable('bindir')[0].toString(), 'clang').getAbsolutePath(),
                MUTATOR_PLUGIN: new File("${rootDir}/build/install/LLVM_Mutation_Tool/lib", OperatingSystem.current().getSharedLibraryName('mutationfinder')).getAbsolutePath(),
        ])
    }

    destinationDir file("${buildDir}/bin")
}

build.dependsOn generateScripts


