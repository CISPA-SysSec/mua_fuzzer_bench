import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.os.OperatingSystem

apply plugin: 'c'
apply plugin: 'cpp'

def llvmConfigVariable(variable, components = []) {
    if (!file("${llvmBinPath}llvm-config").exists()) {
        throw new GradleException("missing llvm-config script")
    }

    def componentsString = String.join(' ', components)
    def proc = "${llvmBinPath}llvm-config --${variable} ${componentsString}".execute()
    def outputStream = new StringBuffer()

    proc.waitForProcessOutput(outputStream, System.err)
    return outputStream.toString().replaceAll('\n', '').trim().split("\\s+")
}


def PkgConfigVariable(variable, library) {
    def proc = "pkg-config --${variable} ${library}".execute()
    def outputStream = new StringBuffer()

    proc.waitForProcessOutput(outputStream, System.err)
    return outputStream.toString().replaceAll('\n', ' ').trim().split("\\s+")
}


model {
    toolChains {
        clang(Clang) {
            path "${llvmBinPath}"
        }
    }

    components {
        Mutationfinderplugin(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir 'sources'
                        include 'mutationfinder.cpp'
                    }

//                     exportedHeaders {
//                         srcDir 'include'
//                     }
                }
            }

            binaries.all { binary ->
                cppCompiler.args llvmConfigVariable('cxxflags')
                // needed for catalina builds
                // TODO maybe also restrict to only use in catalina builds and upwards?
                cppCompiler.args "-isysroot", "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/"
                cppCompiler.args "-isystem", "/Library/Developer/CommandLineTools/usr/include/c++/v1"
                linker.args llvmConfigVariable('ldflags')
                linker.args llvmConfigVariable('libs', ['core'])
            }
        }
    }
}

task generateScripts(type: Copy) {
    from('scripts') {
        include 'compileAndFind.py'
        fileMode 0750

        filter(ReplaceTokens, tokens: [
                LLVM_BINDIR: llvmConfigVariable('bindir')[0],
//                 CLANG      : new File(llvmConfigVariable('bindir')[0].toString(), 'clang').getAbsolutePath(),
                MUTATOR_PLUGIN: new File("${rootDir}/build/install/LLVM_Mutation_Tool/lib", OperatingSystem.current().getSharedLibraryName('Mutationfinderplugin')).getAbsolutePath(),
        ])
    }

    destinationDir file("${buildDir}/bin")
}


